#!/usr/bin/env bash

set -e

sudo apt-get update
sudo apt-get install -y dpkg-dev build-essential tree python g++ make python3-distutils libssl-dev manpages-dev software-properties-common

##########################################################################
# Environment Variables: KEEP UP TO DATE WITH MOST RECENT VERSION NUMBERS
#
#   Check for latest NGINX version here: 
#   http://www.nginx.org/en/download.html
NGINX_VER=1.19.2
#   Check for latest PCRE version here: 
#   https://sourceforge.net/projects/pcre/files/pcre/
#   NOTE: NGINX requires the orignal PCRE library, NOT PCRE2
PCRE_VER=8.44
#   Check for latest zlib version here:
#   http://zlib.net
ZLIB_VER=1.2.11
#   Check for latest OpenSSL version here:
#   https://www.openssl.org/source/
#   NOTE: NGINX can be built with either version 1.1.0.x or 1.0.2.x 
#   Per the website: The latest stable version is the 1.1.0 series. 
#   The 1.0.2 series is the Long Term Support (LTS) release, supported 
#   until 31st December 2019. The 0.9.8, 1.0.0 and 1.0.1 versions are 
#   now out of support and should not be used.
OPENSSL_VER=1.1.1g
#   IMPORTANT NOTE:
#   The NGINX source files and the .deb package generated by this script
#   are both needed to install this customized build on another system. 
#   The folder structure must be exactly the same on the system using the
#   .deb package as it is on this machine. 
#   
#   Thus, it is not a good idea to use a path containing the user's home 
#   folder in the value of the $DOWNLOAD_PATH environment variable (the same 
#   username must be used for the install on both systems if the $DOWNLOAD_PATH 
#   contains the user's home folder).
#
#   Directory where all source files used to build NGINX will be stored
#   temporarily:
DOWNLOAD_PATH=/opt
#   Name of the folder where the .deb package file  and archive (.tar.gz) file
#   will be stored.
INSTALL_PKG_FOLDER=save
#   Name of the folder where downloaded source files will be stored, 
#   this directory and all contents will be removed after NGINX is 
#   successfully installed.
SRC_FOLDER=src_files
# Constant strings DO NOT EDIT THESE VALUES
#
EXT=.tar.gz
NGINX_PRE=nginx-
PCRE_PRE=pcre-
ZLIB_PRE=zlib-
OPENSSL_PRE=openssl-
#
##########################################################################

##########################################################################
# Computed Environment Variables DO NOT EDIT THESE VALUES
#
SRC_PATH=${DOWNLOAD_PATH}/${SRC_FOLDER}
INSTALL_PKG_PATH=${DOWNLOAD_PATH}/${INSTALL_PKG_FOLDER}

NGINX_SRC_PATH=${SRC_PATH}/${NGINX_PRE}${NGINX_VER}
PCRE_SRC_PATH=${SRC_PATH}/${PCRE_PRE}${PCRE_VER}
ZLIB_SRC_PATH=${SRC_PATH}/${ZLIB_PRE}${ZLIB_VER}
OPENSSL_SRC_PATH=${SRC_PATH}/${OPENSSL_PRE}${OPENSSL_VER}

NGINX_SRC_TAR=${NGINX_PRE}${NGINX_VER}${EXT}
PCRE_SRC_TAR=${PCRE_PRE}${PCRE_VER}${EXT}
ZLIB_SRC_TAR=${ZLIB_PRE}${ZLIB_VER}${EXT}
OPENSSL_SRC_TAR=${OPENSSL_PRE}${OPENSSL_VER}${EXT}

ALL_SRC_FILES_TAR=${NGINX_PRE}${NGINX_VER}-src_files${EXT}
#
#
##########################################################################

# Create a directory to store all the source files
sudo mkdir -p $SRC_PATH
cd $SRC_PATH

# Download and extract the source code for the latest version of NGINX
sudo wget http://nginx.org/download/$NGINX_SRC_TAR && sudo tar zxf $NGINX_SRC_TAR

# PCRE, zlib and OpenSSL libraries are needed by various NGINX modules,
# download and extract the latest version of these as well
sudo wget https://sourceforge.net/projects/pcre/files/pcre/${PCRE_VER}/${PCRE_SRC_TAR} && sudo tar zxf $PCRE_SRC_TAR
sudo wget http://zlib.net/${ZLIB_SRC_TAR} && sudo tar xzf $ZLIB_SRC_TAR
sudo wget https://www.openssl.org/source/${OPENSSL_SRC_TAR} && sudo tar xzf $OPENSSL_SRC_TAR

# Install optional NGINX dependencies
#sudo add-apt-repository ppa:maxmind/ppa -y
sudo apt-get update
sudo apt-get install -y perl libperl-dev libgd3 libgd-dev libgeoip1 libgeoip-dev geoip-bin libxml2 libxml2-dev libxslt1.1 libxslt1-dev git
sudo git clone --recursive https://github.com/FRiCKLE/ngx_cache_purge.git

# Clean up all tar.gz files. we wont need them anymore
sudo rm -rf *.tar.gz

#add non-root user
sudo useradd -s /sbin/nologin nginx

# change directory to the nginx source
cd $NGINX_SRC_PATH

# for good measure list directories and files that compose nginx source code with tree utility
tree -L 2 .

# copy nginx manual page to /usr/share/man/man8/ directory
sudo cp $NGINX_SRC_PATH/man/nginx.8 /usr/share/man/man8
sudo gzip /usr/share/man/man8/nginx.8
ls /usr/share/man/man8/ | grep nginx.8.gz
# check that Man page for NGINX is working
man nginx

# Configure, compile and install NGINX
sudo ./configure --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --user=nginx --group=nginx --with-select_module --with-poll_module --with-threads --with-file-aio --with-http_ssl_module --with-http_v2_module --with-http_realip_module --with-http_addition_module --with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_auth_request_module --with-http_random_index_module --with-http_secure_link_module --with-http_degradation_module --with-http_slice_module --with-http_stub_status_module --with-http_perl_module=dynamic --with-perl_modules_path=/usr/share/perl/5.28.1 --with-perl=/usr/bin/perl --http-log-path=/var/log/nginx/access.log --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --with-mail=dynamic --with-mail_ssl_module --with-stream=dynamic --with-stream_ssl_module --with-stream_realip_module --with-stream_ssl_preread_module --with-compat --with-pcre=$PCRE_SRC_PATH --with-pcre-jit --with-zlib=$ZLIB_SRC_PATH --with-openssl=$OPENSSL_SRC_PATH --with-openssl-opt=no-nextprotoneg --with-openssl-opt=enable-ec_nistp_64_gcc_128 --with-openssl-opt=no-weak-ssl-ciphers --with-openssl-opt=no-ssl3 --add-module=../ngx_cache_purge --with-cc-opt='-g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2' --with-ld-opt='-Wl,-z,relro -Wl,--as-needed' --with-debug

# Build nginx with the specified configuration
sudo make
# Create a .deb package
sudo make install

# Install the .deb package, this allows uninstall via apt-get
sudo dpkg -i nginx_${NGINX_VER}_amd64.deb